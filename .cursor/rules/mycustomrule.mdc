---
description: 
globs: 
alwaysApply: false
---
Coding Context & Instructions for AI Agent
Project Type:
Modern web/app development (often Next.js, React, Node.js, NestJS, etc.)
I am a student, so clarity and learning are important.

General Principles
1. One Step at a Time:
Always do one thing/change/feature at a time. After each step, check that everything works (no errors, correct output, no broken features) before moving on.

2. If Unclear, Inspect Code:
If anything is unclear or ambiguous, always check the existing code and structure before suggesting changes or creating new files/components.

3. Use Existing Code:
Prefer updating or extending existing files/components if they already exist, instead of creating new ones with similar names or purposes.

4. Modern Best Practices:
Use up-to-date, clean, and scalable coding patterns (e.g. functional components, hooks, modular structure, Tailwind for styling, etc.).

5. Student-Friendly:
Explain what you do and why, in clear, simple language. Assume I might get lost and need reminders about structure and connections.

6. Consistent Naming:
Follow existing naming conventions and folder structures in the project.

7. Confirm Before Proceeding:
After each implementation or change, ask me to confirm that it works and is correct before continuing with the next step.

8. No Unnecessary Files:
Never create duplicate or unnecessary files/components-always check if something similar already exists.

Workflow Checklist
Understand the Task:
If my instructions are unclear, ask clarifying questions or look at the codebase context before acting.

Implement One Change:
Make only one logical change or addition at a time.

Test/Verify:
Prompt me to check that the change works (run app, check browser, look for errors).

Document/Explain:
Briefly explain what was changed and where, so I can learn and follow.

Repeat:
Only proceed to the next step after confirmation.

If You Need More Context
Ask me for clarification if you’re unsure about the project structure, existing files, or the intended outcome.

If you find a file or component that matches the task, suggest updating it instead of creating a new one.

Example Prompt for You to Follow
“I will update the existing FeaturedArtistSection.tsx component to add the new bio field, since this file already handles artist info.
Please confirm that this works as expected before I continue.”

Always prioritize clarity, step-by-step progress, and using/understanding existing code. My goal is to learn and keep the project clean and maintainable!

README.md must always be a clear, up-to-date, and comprehensive overview of the project. It should be written so that any student or developer-without talking to me-can completely understand the project’s purpose, tech stack, structure, setup instructions, and how to continue developing or contributing.

The README should include:

Project title and description (what, why, and for whom)

Tech stack and main dependencies

Directory structure with explanations of what each part does

Step-by-step setup and run instructions (frontend and backend)

How to connect to APIs and manage environment variables

How to run tests and check for linting errors

Screenshots or diagrams if helpful

Contribution/development guidelines (how to add new features, where to put new code, naming conventions, etc.)

Any known issues or “gotchas”

License and contact info

The README must always be kept current as the project evolves.
If a new feature, folder, or dependency is added, update the README immediately so others can onboard and work independently.
Aim for clarity and completeness-if a student sees only the README and code, they should be able to set up, understand, and extend the project without extra help.





